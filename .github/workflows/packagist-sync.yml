name: Version Tag and Packagist Sync

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'  # Ignore README.md changes to prevent loops
      - '*.md'       # Ignore other markdown files
      - 'docs/**'    # Ignore documentation updates
      - '.gitignore' # Ignore gitignore updates
  release:
    types: [ published ]

permissions:
  contents: write
  pull-requests: write
  repository-projects: write

jobs:
  test-and-update-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history

      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, zip, xdebug
          coverage: xdebug
          tools: composer:v2

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run code quality checks
        run: |
          echo "Running PHPStan..."
          vendor/bin/phpstan analyse src tests --level=5 || echo "PHPStan warnings found, but continuing workflow"
          
          # If PHP CS Fixer is installed
          if [ -f "vendor/bin/php-cs-fixer" ]; then
            echo "Running PHP CS Fixer..."
            vendor/bin/php-cs-fixer fix --dry-run --diff || echo "CS Fixer issues found, but continuing workflow"
          else
            echo "PHP CS Fixer not installed, skipping"
          fi

      - name: Run tests with coverage
        id: coverage_run
        run: |
          XDEBUG_MODE=coverage php vendor/bin/phpunit --coverage-text > coverage-output.txt
          echo "Test completed successfully"
          cat coverage-output.txt

      - name: Extract coverage percentage
        id: extract_coverage
        run: |
          COVERAGE_DATA=$(cat coverage-output.txt | grep "Lines:" | awk '{print $2}' | head -n 1 | tr -d '%')
          echo "coverage=$COVERAGE_DATA" >> $GITHUB_OUTPUT
          echo "Coverage percentage: $COVERAGE_DATA%"
          rm coverage-output.txt
        
      - name: Update README with coverage
        run: |
          COVERAGE_DATA="${{ steps.extract_coverage.outputs.coverage }}"
          # Update the coverage badge in README.md using perl instead of sed for better reliability
          perl -i -pe 's/!\[COVERAGE [0-9.]+%\]\(https:\/\/img\.shields\.io\/badge\/coverage-[0-9.]+%25-0E1111\?style=flat&logo=php&logoColor=white&labelColor=171717&color=009933\)/![COVERAGE '"$COVERAGE_DATA"'%](https:\/\/img.shields.io\/badge\/coverage-'"$COVERAGE_DATA"'%25-0E1111?style=flat&logo=php&logoColor=white&labelColor=171717&color=009933)/g' README.md

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if README.md exists and has been modified
          git add README.md
          
          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            # Check if we have any commits in the repository
            if git rev-parse --verify HEAD >/dev/null 2>&1; then
              # Repository has commits, create a new commit
              git commit -m "docs: update coverage badge to ${COVERAGE_DATA}% [skip ci]"
              git push
            else
              # Empty repository, create an initial commit
              git commit -m "Initial commit with coverage badge ${COVERAGE_DATA}% [skip ci]"
              git push --set-upstream origin ${GITHUB_REF#refs/heads/}
            fi
          else
            echo "No changes to README.md, skipping commit"
          fi

  version-and-sync-packagist:
    runs-on: ubuntu-latest
    needs: test-and-update-coverage
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
        ref: ${{ github.ref }}
        # Ensure we get the latest changes including those from the previous job
        
    - name: Pull latest changes
      run: |
        git pull origin ${{ github.ref_name }}
        echo "Pulled latest changes including README updates from previous job"

    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Get latest tag
      id: latest_tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"
    
    - name: Calculate next version
      id: next_version
      run: |
        LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"
        # Remove 'v' prefix if present
        VERSION_NUMBER=${LATEST_TAG#v}
        
        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUMBER"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Check commit messages for version bump indicators
        # Exclude commits with [skip ci] in the message (README updates)
        if git log $LATEST_TAG..HEAD --oneline | grep -v "\[skip ci\]" | grep -qE "(BREAKING CHANGE|major):"; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
          echo "Major version bump detected"
        elif git log $LATEST_TAG..HEAD --oneline | grep -v "\[skip ci\]" | grep -qE "(feat|feature|minor):"; then
          MINOR=$((MINOR + 1))
          PATCH=0
          echo "Minor version bump detected"
        else
          PATCH=$((PATCH + 1))
          echo "Patch version bump detected"
        fi
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_TAG="v$NEW_VERSION"
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "New version: $NEW_TAG"
    
    - name: Create and push tag
      if: github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        NEW_TAG="${{ steps.next_version.outputs.tag }}"
        git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
        git push origin "$NEW_TAG"
        echo "Created and pushed tag: $NEW_TAG"
    
    - name: Generate changelog
      if: github.event_name == 'push'
      id: changelog
      run: |
        LATEST_TAG="${{ steps.latest_tag.outputs.tag }}"
        NEW_TAG="${{ steps.next_version.outputs.tag }}"
        
        echo "## Changes in $NEW_TAG" > changelog.md
        echo "" >> changelog.md
        
        # Function to categorize and format commits
        generate_formatted_changelog() {
          echo "### 🚀 Features" >> changelog.md
          git log $1 --grep="^feat\|^feature\|^minor:" --oneline --format="- %s" | grep -v "\[skip ci\]" >> changelog.md || echo "- No new features" >> changelog.md
          
          echo "" >> changelog.md
          echo "### 🐛 Bug Fixes" >> changelog.md
          git log $1 --grep="^fix:" --oneline --format="- %s" | grep -v "\[skip ci\]" >> changelog.md || echo "- No bug fixes" >> changelog.md
          
          echo "" >> changelog.md
          echo "### ⚙️ Other Changes" >> changelog.md
          git log $1 --grep="^chore\|^refactor\|^docs\|^test\|^ci\|^build\|^perf:" --oneline --format="- %s" | grep -v "\[skip ci\]" >> changelog.md || echo "- No other changes" >> changelog.md
          
          # Add breaking changes separately with emphasis
          echo "" >> changelog.md
          BREAKING_CHANGES=$(git log $1 --grep="BREAKING CHANGE\|^major:" --oneline --format="- **BREAKING**: %s" | grep -v "\[skip ci\]" || echo "")
          if [ ! -z "$BREAKING_CHANGES" ]; then
            echo "### ⚠️ BREAKING CHANGES" >> changelog.md
            echo "$BREAKING_CHANGES" >> changelog.md
          fi
        }
        
        if [ "$LATEST_TAG" != "v0.0.0" ]; then
          generate_formatted_changelog "$LATEST_TAG..HEAD"
        else
          # For first release, use all commits
          generate_formatted_changelog ""
        fi
        
        echo "" >> changelog.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...$NEW_TAG" >> changelog.md
        
        # Set output for the release body
        {
          echo 'body<<EOF'
          cat changelog.md
          echo EOF
        } >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      if: github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.next_version.outputs.tag }}
        name: Release ${{ steps.next_version.outputs.tag }}
        body: ${{ steps.changelog.outputs.body }}
        draft: false
        prerelease: false
        generate_release_notes: true
    
    - name: Notify Packagist
      run: |
        echo "Notifying Packagist about package update..."
        curl -XPOST -H 'content-type:application/json' \
          'https://packagist.org/api/update-package?username=beecodersteam&apiToken=${{ secrets.PACKAGIST_TOKEN }}' \
          -d '{"repository":{"url":"https://github.com/${{ github.repository }}"}}' \
          -f || echo "Warning: Packagist notification failed, but continuing workflow"
          
    - name: Post Notification to Slack
      if: env.SLACK_WEBHOOK != ''
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        VERSION: ${{ steps.next_version.outputs.tag }}
      run: |
        if [ -n "$SLACK_WEBHOOK" ]; then
          curl -X POST -H 'Content-type: application/json' --data "{
            \"blocks\": [
              {
                \"type\": \"header\",
                \"text\": {
                  \"type\": \"plain_text\",
                  \"text\": \"🚀 New Release: $VERSION\"
                }
              },
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Package:* beecodersteam/mycommands\n*Version:* $VERSION\n*GitHub:* <https://github.com/${{ github.repository }}/releases/tag/$VERSION|View Release>\n*Packagist:* <https://packagist.org/packages/beecodersteam/mycommands#$VERSION|View Package>\"
                }
              }
            ]
          }" $SLACK_WEBHOOK || echo "Failed to send Slack notification"
        else
          echo "Skipping Slack notification - no webhook configured"
        fi
